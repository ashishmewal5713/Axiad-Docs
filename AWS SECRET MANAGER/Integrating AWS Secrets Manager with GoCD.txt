Integrating AWS Secrets Manager with GoCD

1. Overview

This document provides step-by-step instructions for integrating AWS Secrets Manager with GoCD to securely fetch and use secrets in a pipeline.

2. Installing and Integrating AWS Secrets Manager Plugin in GoCD

2.1. Download the AWS Secrets Manager Plugin

Download the AWS Secrets Manager plugin for GoCD from the official repository:

Link:-  https://github.com/gocd/gocd-aws-based-secrets-plugin/releases/tag/v1.1.0-494

I have downloaded the below Jar file

- gocd-aws-based-secrets-plugin-1.1.0-494.jar

Copy the downloaded .jar file to the GoCD server’s plugin directory:

- kubectl cp gocd-aws-based-secrets-plugin-1.1.0-494.jar gocd-server-76c65944b7-jdbpf:/godata/plugins/external/ -n gocd

Restart the GoCD server to load the plugin:

Since GoCD loads plugins only at startup,we had to restart the server pod. we deleted the existing pod so Kubernetes could automatically create a new one:

- kubectl delete pod gocd-server-76c65944b7-jdbpf -n gocd

Verify that the plugin is installed:

Go to GoCD Dashboard → Admin → Plugins

Ensure AWS Secrets Manager Plugin is listed as active

3. Confirming AWS Secrets Manager Plugin on GoCD Server

After restarting the GoCD server:

Navigate to GoCD Dashboard → Admin → Secret Management.

Click Add and select AWS Secrets Manager Plugin.

Configure the plugin:

Secret Config ID: aws-secrets-manager

Endpoint: https://secretsmanager.us-east-1.amazonaws.com
(as I have created my Secret in us-east-1 region)

Put your Access Key & Secret Access Key

Region: us-east-1

Secret Name: axiad-ashish-secret
( I have created this secret name in AWS)

Secret Cache TTL: 1800000 (30 minutes)

Click New Permission and allow pipelines to access secrets.

Save the configuration.

4. Creating a Secret in AWS Secrets Manager

Log in to AWS Console.

Navigate to AWS Secrets Manager → Click Store a new secret.

Select Other type of secret.

Enter key-value pairs:

Key: Username

Value: your-secret-value

Click Next, enter Secret Name: axiad-ashish-secret, and complete the setup.

5. Creating the GoCD Pipeline

Navigate to GoCD Dashboard → Pipelines → Click New Pipeline.

Configure:

Pipeline Name: GoCD-AWS-Secrets-Pipeline

Material: Git (or any source control as per your setup)

Stage: Build

Job: FetchSecrets

Click Create Pipeline.

7. Adding Environment Variables for Secret Fetching

In GoCD Pipeline Configuration → Navigate to FetchSecrets job.

Click Environment Variables and add:

Syntax of Value:- {{SECRET:[secret_config_id][secret_key]}}

For reference below:- 

AWS_SECRET = {{SECRET:[aws-secrets-manager][Username]}}

Save the configuration.

8. Running the Task in GoCD

Navigate to FetchSecrets job.

Add a new Task:

Command: /bin/sh

Arguments:

-c
echo AWS Secret: ${AWS_SECRET}

Save and run the pipeline.

9. Verifying the Output

Once the pipeline runs, check the console output.

Expected output:

AWS Secret: ***** 

10. Conclusion

By following these steps, we have successfully:

Installed and configured the AWS Secrets Manager plugin in GoCD

Created secrets in AWS Secrets Manager

Integrated secrets with GoCD pipelines

Retrieved and used secrets securely in GoCD jobs.

This ensures that sensitive credentials remain secure while being accessible to GoCD pipelines when needed.