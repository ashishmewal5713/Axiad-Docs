GoCD Backup to S3 - Step-by-Step Guide


1. Create an S3 Bucket in AWS

1.1 Log in to AWS Console

Go to AWS Console and sign in.

1.2 Navigate to S3

Open the AWS Management Console.
Search for S3 in the search bar and click on S3.
Create a New Bucket

1.3 Click Create bucket.

Enter a Bucket Name (e.g., gocd-backups-demo).
Select a Region (e.g., us-east-1).
Leave all other settings as default (or configure them as per your security needs).
Click Create bucket.


2. Check AWS CLI on GoCD Server and Agent

You need AWS CLI installed on both the GoCD server and GoCD agent.

2.1 Check if AWS CLI is already installed

Run the following command inside the GoCD server and agent pods:

-   aws --version

3. Configure AWS Credentials on GoCD Server

3.1 Enter the GoCD Server Pod

-   kubectl exec -it <gocd-server-pod-name> -n gocd -- /bin/bash

3.2 Run AWS Configure Command

-   aws configure

3.3 Provide the following details:

AWS Access Key ID [None]: <YOUR_AWS_ACCESS_KEY>
AWS Secret Access Key [None]: <YOUR_AWS_SECRET_KEY>
Default region name [None]: us-east-1
Default output format [None]: (Leave blank and press Enter)

3.4 Test if the Configuration Works

-   aws s3 ls

You should see your S3 bucket in the output.

4. Locate GoCD Backup Directory

4.1 Enter the GoCD Server Pod

-   kubectl exec -it <gocd-server-pod-name> -n gocd -- /bin/bash

4.2 Find the Backup Directory

-   ls -l /go-working-dir/artifacts/serverBackups

Example output:

drwxr-xr-x    2 go       root          4096 Feb 25 10:24 backup_20250225-152447
drwxr-xr-x    2 go       root          4096 Feb 26 01:35 backup_20250226-013538

The backup directory is:


-   /go-working-dir/artifacts/serverBackups


5. Create the Backup Upload Script

5.1 Enter the GoCD Server Pod

-   kubectl exec -it <gocd-server-pod-name> -n gocd -- /bin/bash

5.2 Create the Script in below 

-   vi /godata/upload-backup.sh

Press i to enter insert mode and paste the following:(Modify according to your need)

#!/bin/bash

BACKUP_DIR="/go-working-dir/artifacts/serverBackups"
S3_BUCKET="gocd-backups-demo"
AWS_REGION="us-east-1"

# Find the latest backup folder
LATEST_BACKUP=$(ls -td $BACKUP_DIR/backup_* | head -n1)

if [ -z "$LATEST_BACKUP" ]; then
    echo "No backup found!"
    exit 1
fi

echo "Latest backup found: $LATEST_BACKUP"

# Upload the entire backup folder to S3
aws s3 cp "$LATEST_BACKUP" "s3://$S3_BUCKET/$(basename $LATEST_BACKUP)" --recursive --region $AWS_REGION

if [ $? -eq 0 ]; then
    echo "Backup uploaded successfully!"
else
    echo "Backup upload failed!"
    exit 1
fi


Press ESC, type :wq, and press Enter to save and exit.

5.3 Make the Script Executable

-   chmod +x /godata/upload-backup.sh


6. Configure GoCD to Use the Post-Backup Script

6.1 Log in to GoCD Web UI

Open your browser and go to http://<GoCD-Server-IP>:8153/go/admin/backup

6.2 Configure Backup Settings

Click "Configure Backup Settings".
Set Post Backup Script to:

-   /godata/upload-backup.sh

Click Save Configuration.


7. Test the Backup & Upload Process

7.1 Perform a Manual Backup

Go to Admin → Backup.

Click Perform Backup.

7.2 Verify Upload to S3

Run the following command to list backups in S3:

-   aws s3 ls s3://gocd-backups-demo/

You should see something like:

2025-02-26  01:35:38    backup_20250226-013538/

- You can also check manually by going in S3 bucket(gocd-backups-demo) through aws console

8. Automate Scheduled Backups (Optional)

8.1 Go to Admin → Backup.
8.2 Enable Scheduled Backup.
8.3 Set a Schedule (e.g., daily at midnight) using a cron-like syntax.
8.4 Save the Configuration.

9. Summary

9.1 Created an S3 bucket for storing backups.
9.2 Verify AWS CLI on both GoCD Server and Agent.
9.3 Configured AWS credentials on the GoCD server.
9.4 Located the GoCD backup directory.
9.5 Created an upload script to send backups to S3.
9.6 Configured GoCD to execute the script after each backup.
9.7 Verified backups in S3.
9.8 (Optional) Configured automated scheduled backups.
 